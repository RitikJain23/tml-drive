"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require("../utils");

var _extractSubNavs = require("./extractSubNavs");

var _extractSubNavs2 = _interopRequireDefault(_extractSubNavs);

var _extractTree = require("./extractTree");

var _extractSubUiSchema = require("./extractSubUiSchema");

var _extractSubUiSchema2 = _interopRequireDefault(_extractSubUiSchema);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function asNavField(field, navConfs, uiSchema) {
  uiSchema[field] = {
    navConfs: navConfs,
    "ui:field": "nav",
    origUiSchema: uiSchema[field]
  };
}

function asHiddenField(field, uiSchema) {
  uiSchema[field] = {
    "ui:widget": "hidden",
    "ui:field": "hidden"
  };
}

function toHiddenUiSchema(_ref, uiSchema) {
  var properties = _ref.properties;

  var cleanUiSchema = Object.keys(properties).reduce(function (agg, field) {
    asHiddenField(field, agg);
    return agg;
  }, Object.assign({}, uiSchema));
  return cleanUiSchema;
}

var NavTree = function () {
  function NavTree(schema, uiSchema) {
    _classCallCheck(this, NavTree);

    _initialiseProps.call(this);

    this.tree = (0, _extractTree.extractTree)(schema, uiSchema);
    this.schema = schema;
    this.uiSchema = uiSchema;

    this.updateActiveNav = this.updateActiveNav.bind(this);
    this.findActiveNav = this.findActiveNav.bind(this);
    this.toSubForms = this.toSubForms.bind(this);
  }

  _createClass(NavTree, [{
    key: "updateActiveNav",
    value: function updateActiveNav(activeNavs, relTree) {
      relTree = relTree ? relTree : (0, _extractTree.findRelTree)(this.tree, activeNavs);
      var orderedNavs = (0, _extractSubNavs.orderNavByName)(Object.keys(relTree), this.uiSchema);
      var nextNav = orderedNavs.find(function (nav) {
        return nav !== _utils.GENERIC_NAV;
      });
      if (nextNav) {
        activeNavs.push(nextNav);
        this.updateActiveNav(activeNavs, relTree[nextNav]);
      }
    }
  }, {
    key: "findActiveNav",
    value: function findActiveNav(field) {
      var _this = this;

      return (0, _utils.findFieldNavs)(field, this.uiSchema).map(function (nav) {
        return (0, _extractSubNavs.toNavConfOrDefault)(nav, _this.uiSchema);
      });
    }
  }]);

  return NavTree;
}();

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.buildUiSchema = function (activeNav, tree, uiSchema, onNavChange) {
    var pos = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var navConfs = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];

    if (tree[_utils.GENERIC_NAV]) {
      var _tree$GENERIC_NAV = tree[_utils.GENERIC_NAV],
          fields = _tree$GENERIC_NAV.fields,
          aliases = _tree$GENERIC_NAV.aliases;


      (0, _extractSubUiSchema2.default)(fields, aliases, _this2.uiSchema, uiSchema);

      if (navConfs.length > 0) {
        asNavField(fields[0], navConfs, uiSchema);
      }
      navConfs = [];
    }

    if (activeNav.length === pos) {
      return uiSchema;
    }

    var nextTree = tree[activeNav[pos]];
    var nextNavConf = (0, _extractSubNavs2.default)(tree, _this2.uiSchema, activeNav.slice(0, pos + 1), onNavChange);

    return _this2.buildUiSchema(activeNav, nextTree, uiSchema, onNavChange, pos + 1, navConfs.concat(nextNavConf));
  };

  this.toSubForms = function (activeNav, onNavChange) {
    var hiddenUiSchema = toHiddenUiSchema(_this2.schema, _this2.uiSchema);
    return _this2.buildUiSchema(activeNav, _this2.tree, hiddenUiSchema, onNavChange);
  };
};

exports.default = NavTree;